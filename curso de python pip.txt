Comandos Utilizados Windows y Linux

	-> python
	-> python3
	-> exit() para salir de la interfaz de python

Instalación

	-> apt update
	-> sudo apt update
	-> sudo apt -y upgrade

Verificar Instalación de python

	-> python3 -V

Instalación de gestor de paquetes de dependencias

	-> sudo apt install -y python3-pip

Verificar Instalación del gestor

	-> pip3 -V

Dependencias en entorno profesional

	-> apt install -y build-essential libssl-dev libffi-dev python3-dev

Comandos utilizados en MAC

	-> python o python3
	-> exit()

Normalmente viene instalado en Mac, en caso de que no lo tenga continuar con estos comandos

Herramientas de código

	-> sudo xcode-select --install
	-> sudo xcode-select --reset

Instalación de python

	-> brew install python3

Verificar la Instalación

	-> python3

Crear repositorio en GITGUB
Comando para enlazar e inicializar
	-> ll
	-> git init
	-> ll
	-> git remote add origin (enlace gitgub)
	-> git remote -v
	-> git add *
	-> git commit -m “Mi primer archivo”
	-> git push origin master

Refrescar pagina y revisar
Después de tener los dos archivos .gitignore y README.md_ agregarlo al gitgub, revisar que estén los tres archivos cargados.

https://www.toptal.com/developers/gitignore/

Windows , linux, macOS, Python --> CREATE

https://www.toptal.com/developers/gitignore/api/macos,windows,linux,python

El README es un archivo con extensión .md, es decir, está escrito en Markdown, que es un lenguaje de marcado utilizado para convertir texto en HTML válido.

	En plataformas de repositorios remotos como GitHub, la función de este archivo es 	presentar información del proyecto, como:

	-> Descripción de su proyecto;
	-> Funcionalidades;
	-> Cómo pueden usarlo los usuarios;
	-> Donde los usuarios pueden encontrar ayuda sobre su proyecto;
	-> Autores del proyecto.

https://www.makeareadme.com


README:

# Game Project

Texto

Para los comandos en el readme:

```sh
cd game
Python3 main.py	

````


¿Que es pip?

PIP es el gestor de paquetes de python, es posible buscar librerías en la pagina pypi.org.

	-> Ver la versión de pip pip3 -v.
	-> Instalación de paquetes pip3 install <libreria>.
	-> Listar las librerías que se tienen en el entorno de python global pip3 list.
	-> Listar todas las librerías de python instaladas por el usuario pip3 freeze.


Verificar donde esta python y pip

	-> which python3
	-> which pip3

Si estas en0 linus o wsl debes instalar

	-> sudo apt install -y python3-venv

Poner cada proyecto en su propio ambiente, entrar en cada carpeta.

	-> python3 -m venv env

Activar el ambiente

	-> source env/bin/activate

Salir del ambiente virtual

	-> deactivate

Podemos instalar las librerias necesarias en el ambiente virtual como por ejemplo

	-> pip3 install matplotlib==3.5.0

Verificar las instalaciones

	-> pip3 freeze

El comando 'python3 -m' venv
se utiliza para crear un nuevo entorno virtual en Python 3. El comando toma como argumento la ruta de un directorio donde se creará el entorno virtual.

El argumento '-m' es una opción de línea de comando en Python que indica que el siguiente argumento es el nombre de un módulo que se debe ejecutar como un script.

En el caso específico del comando 'python3 -m venv', el argumento -m indica que se debe ejecutar el módulo 'venv' como un script.

Generar el archivo con el siguiente comando

	-> pip3 freeze > requirements.txt

Revisar lo que hay dentro del archivo

	-> cat requirements.txt

Instalar las dependencias necesarias para contribuir más rápido en proyectos

	-> pip3 install -r requirements.txt

# App Project
```sh
git clone
cd app
python3 -m venv env
source env/bin/activate
pip3 install -r requirements.txt
python3 main.py


Crear un entorno 

	-> python3 -m venv env

Activar un entorno virtual

	-> source env/bin/activate

Verificar que estemos dentro del entorno virtual

	-> which python3

Instalar la dependencia dentro del entorno virtual

	-> pip3 install requests

Verificar la instalación

	-> pip3 freeze

Crear el archivo para que cualquier persona pueda desplegar el proyecto

	-> pip freeze > requeriments.txt


Las solicitudes HTTP son mensajes enviados por un cliente a un servidor para solicitar información o enviar datos al servidor. La biblioteca de solicitudes es una biblioteca popular de Python para realizar solicitudes HTTP. Con la biblioteca de solicitudes, puede enviar solicitudes HTTP utilizando Python.

Este es un ejemplo de cómo utilizar la biblioteca de solicitudes para realizar una solicitud GET a un sitio web:

import requests

response = requests.get('https://www.example.com')

print(response.status_code)
print(response.text)


La primera línea importa la biblioteca de Solicitudes. La segunda línea envía una solicitud GET al sitio web https://www.example.comy almacena la respuesta en la responsevariable. La responsevariable es una instancia de la Responseclase, que contiene la respuesta del servidor a la solicitud.

El status_codeatributo del Responseobjeto contiene el código de estado de la respuesta, como 200 para una solicitud exitosa o 404 para un error de página no encontrada. El textatributo contiene el cuerpo de la respuesta como una cadena.


PANDAS

Es una de las librerias mas utilizadas en python y nos sirven para analizar y manipular datos de archivos duros

Activar anbiente del proyecto

	-> source env/bin/activate

Verificar
 
	-> which python3

Ver que hay dentro del archivo en el cual se evidencia que no hay pandas

	-> cat reqruirements.txt

Agregar nueva libreria

	-> pip3 install pandas

Verificar librerias instaladas

	-> pip3 freeze

Actualizar el documento que contiene las librerias

	-> pip3 freeze > requirements.txt


FastAPI


Es un framework de Python para crear aplicaciones web rápidas y seguras. Utilice la mejor OpenAPI para definir la interfaz de la aplicación y proporcione un conjunto de herramientas para validar y documentar la API de manera automática.

https://fastapi.tiangolo.com

****Uvicorn ****

Es un servidor ASGI (Asynchronous Server Gateway Interface) de alto rendimiento para ejecutar aplicaciones ASGI como FastAPI. Es una alternativa a otros servidores ASGI como Daphne y Hypercorn.

https://www.uvicorn.org

FastAPI y Uvicorn se utilizan juntos para proporcionar un entorno rápido y fácil de usar para el desarrollo y el uso de aplicaciones web basadas en ASGI.


	pip install fastapi


A continuación, puede comenzar a crear su primera aplicación FastAPI. Por ejemplo, aquí tienes un ejemplo de una aplicación que expone una ruta “/” que recibe una solicitud GET y devuelve un mensaje de bienvenida:


from fastapi import FastAPI

app = FastAPI()

@app.get("/")
def read_root():
    return {"Hello": "World"}

if __name__ == "__main__":
    app.run()


¿Qué es Docker?

Docker utiliza una imagen del sistema operativo como base para las aplicaciones empaquetadas en contenedores. Esto permite que los contenedores sean ligeros y fáciles de distribuir, ya que solo incluyen lo necesario para ejecutar la aplicación y no todo el sistema operativo completo.

------------------------------------------------------------------------------------------
Instalación en Windows con WSL 

Debes descargar el instalador desde la página de Docker for Windows.

https://docs.docker.com/desktop/install/windows-install/


Cuando ya tienes instalado Docker Desktop dentro de tus programas debes abrirlo y debes asegurarte que la opción “Use the WSL 2 based engine” está habilitada

Luego en la sección “Resources > WSL Integration”, asegurarate que la opcion “Enable integration with my default WSL distro”, este habilitada.

------------------------------------------------------------------------------------------
Instalación en Windows

Cuando ya tienes instalado Docker Desktop dentro de tus programas, una de las cosas que debes tener en cuenta en la instalación con Windows es que debes contar con Windows 10 de 64 Bits o superior y debes habilitar el Hyper-V de Windows.

Si quieres conocer los detalles, aquí te dejo el detalle como habilitar Hyper-V desde la Interfaz de Windows

-----------------------------------------------------------------------------------------
Instalación en macOS 

https://docs.docker.com/desktop/install/mac-install/

En Mac tienes dos opciones. Todo dependerá si tienes los nuevos chips M1 o Intel, ya que hay un instalable apropiado para ambas arquitecturas de chip. Puedes escoger el instalable desde Install Docker Desktop on Mac.

Adicionalmente, si cuentas con los nuevos chips M1, debes ejecutar la siguiente instrucción en tu terminal softwareupdate --install-rosetta

Una vez descargues el instalador adecuado, solo debes seguir los pasos y pasar Docker Desktop a tus aplicaciones.

------------------------------------------------------------------------------------------
Instalación en Ubuntu

https://docs.docker.com/engine/install/ubuntu/

sudo apt-get update

sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

sudo mkdir -p /etc/apt/keyrings

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin

sudo docker run hello-world


-> docker-compose build: Este comando se utiliza para construir las imágenes de los servicios especificados en el archivo “docker-compose.yml”. Esto significa que tomará las especificaciones de construcción de cada servicio, como el Dockerfile y los contextos, y creará una imagen nueva y actualizada.

-> docker-compose ps: Este comando se utiliza para ver el estado de los servicios especificados en el archivo “docker-compose.yml”. Muestra si los servicios están corriendo o detenidos, y también muestra el nombre del contenedor, el puerto y la imagen utilizada.

-> docker-compose down: Este comando se utiliza para detener y eliminar los contenedores, redes y volúmenes creados por “docker-compose up”.

-> docker-compose up -d: Este comando se utiliza para iniciar los servicios especificados en el archivo “docker-compose.yml” en segundo plano. El parámetro “-d” indica que se ejecutará en segundo plano.

-> docker-compose ps: Es el mismo comando que el segundo, pero se repite para mostrar el estado de los servicios después de haber sido iniciados.

-> docker-compose exec app-csv bash: Este comando se utiliza para ejecutar una terminal dentro del contenedor especificado, en este caso “app-csv”, y conectarse a él mediante una sesión interactiva de bash. Esto permite realizar tareas dentro del contenedor, como verificar los archivos o ejecutar comandos.

Automatizando la vinculacion de archivos en Docker

Cuando realizamos un cambio en el codigo del programa, este no se refleja en el codigo almacenado en el contenedor por lo que para verlo reflejado debemos salir del contenedor y lanzarlo nuevamente lo cual daña la experiencia de desarrollo.

Para resolver este problema y ver los cambios reflejados de manera automatica en el contenedor, salimos del mismo y se agrega la siguiente linea en el archivo docker-
compose.yml


 services:
  app-csv:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app

Una vez agregado, lanzamos el docker nuevamente con el comando:

	docker-compose up -d

Nos conectamos con el contenedor

docker-compose exec app-csv bash


Dockerfile
FROM python:3.10

WORKDIR /app
COPY requirementes.txt /app/requirementes.txt

RUN pip install --no-cache-dir --upgrade -r /app/requirementes.txt

COPY . /app

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "80"]
docker-compose
services:
  web-server:
    build: 
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
    ports:
      - '80:80'